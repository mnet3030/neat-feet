package com.imagine.neatfeat.model.dal.entity;
// Generated Apr 5, 2019 12:30:03 PM by Hibernate Tools 4.3.1


import org.hibernate.annotations.GenericGenerator;

import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import javax.persistence.*;
import javax.persistence.Entity;

/**
 * Product generated by hbm2java
 */
@Entity
@Table(name="product"
        ,catalog="\"e-commerce\""
)
public class Product  implements com.imagine.neatfeat.model.dal.entity.Entity {


    private UUID id;
    private Brand brand;
    private Category category;
    private String description;
    private String shortLinedDescription;
    private String detailedDescription;
    private int price;
    private int quantity;
    private int buyingCount;
    private String mainPhotoUrl;
    private Short discount;
    private Set<WishingListProducts> wishingListProductses = new HashSet<WishingListProducts>(0);
    private Set<ShoppingCartProducts> shoppingCartProductses = new HashSet<ShoppingCartProducts>(0);
    private Set<ProductMedia> productMedias = new HashSet<ProductMedia>(0);
    private Set<UserVisitProducts> userVisitProductses = new HashSet<UserVisitProducts>(0);
    private Set<OrderProducts> orderProductses = new HashSet<OrderProducts>(0);

    public Product() {
    }


    public Product(UUID id, Brand brand, Category category, String description, String shortLinedDescription, String detailedDescription, int price, int quantity, int buyingCount, String mainPhotoUrl) {
        this.id = id;
        this.brand = brand;
        this.category = category;
        this.description = description;
        this.shortLinedDescription = shortLinedDescription;
        this.detailedDescription = detailedDescription;
        this.price = price;
        this.quantity = quantity;
        this.buyingCount = buyingCount;
        this.mainPhotoUrl = mainPhotoUrl;
    }
    public Product(UUID id, Brand brand, Category category, String description, String shortLinedDescription, String detailedDescription, int price, int quantity, int buyingCount, String mainPhotoUrl, Short discount, Set<WishingListProducts> wishingListProductses, Set<ShoppingCartProducts> shoppingCartProductses, Set<ProductMedia> productMedias, Set<UserVisitProducts> userVisitProductses, Set<OrderProducts> orderProductses) {
        this.id = id;
        this.brand = brand;
        this.category = category;
        this.description = description;
        this.shortLinedDescription = shortLinedDescription;
        this.detailedDescription = detailedDescription;
        this.price = price;
        this.quantity = quantity;
        this.buyingCount = buyingCount;
        this.mainPhotoUrl = mainPhotoUrl;
        this.discount = discount;
        this.wishingListProductses = wishingListProductses;
        this.shoppingCartProductses = shoppingCartProductses;
        this.productMedias = productMedias;
        this.userVisitProductses = userVisitProductses;
        this.orderProductses = orderProductses;
    }

    @Id
    @GeneratedValue(generator = "uuid2")
    @GenericGenerator(name = "uuid2", strategy = "uuid2")
    @Column(columnDefinition = "BINARY(16)", name="id", unique=true, nullable=false)
    public UUID getId() {
        return this.id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="brand_id", nullable=false)
    public Brand getBrand() {
        return this.brand;
    }

    public void setBrand(Brand brand) {
        this.brand = brand;
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="category_id", nullable=false)
    public Category getCategory() {
        return this.category;
    }

    public void setCategory(Category category) {
        this.category = category;
    }


    @Column(name="description", nullable=false, length=200)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }


    @Column(name="short_lined_description", nullable=false, length=200)
    public String getShortLinedDescription() {
        return this.shortLinedDescription;
    }

    public void setShortLinedDescription(String shortLinedDescription) {
        this.shortLinedDescription = shortLinedDescription;
    }


    @Column(name="detailed_description", nullable=false, length=400)
    public String getDetailedDescription() {
        return this.detailedDescription;
    }

    public void setDetailedDescription(String detailedDescription) {
        this.detailedDescription = detailedDescription;
    }


    @Column(name="price", nullable=false)
    public int getPrice() {
        return this.price;
    }

    public void setPrice(int price) {
        this.price = price;
    }


    @Column(name="quantity", nullable=false)
    public int getQuantity() {
        return this.quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }


    @Column(name="buying_count", nullable=false)
    public int getBuyingCount() {
        return this.buyingCount;
    }

    public void setBuyingCount(int buyingCount) {
        this.buyingCount = buyingCount;
    }


    @Column(name="main_photo_url", nullable=false)
    public String getMainPhotoUrl() {
        return this.mainPhotoUrl;
    }

    public void setMainPhotoUrl(String mainPhotoUrl) {
        this.mainPhotoUrl = mainPhotoUrl;
    }


    @Column(name="discount")
    public Short getDiscount() {
        return this.discount;
    }

    public void setDiscount(Short discount) {
        this.discount = discount;
    }

    @OneToMany(fetch=FetchType.LAZY, mappedBy="product")
    public Set<WishingListProducts> getWishingListProductses() {
        return this.wishingListProductses;
    }

    public void setWishingListProductses(Set<WishingListProducts> wishingListProductses) {
        this.wishingListProductses = wishingListProductses;
    }

    @OneToMany(fetch=FetchType.LAZY, mappedBy="product")
    public Set<ShoppingCartProducts> getShoppingCartProductses() {
        return this.shoppingCartProductses;
    }

    public void setShoppingCartProductses(Set<ShoppingCartProducts> shoppingCartProductses) {
        this.shoppingCartProductses = shoppingCartProductses;
    }

    @OneToMany(fetch=FetchType.LAZY, mappedBy="product")
    public Set<ProductMedia> getProductMedias() {
        return this.productMedias;
    }

    public void setProductMedias(Set<ProductMedia> productMedias) {
        this.productMedias = productMedias;
    }

    @OneToMany(fetch=FetchType.LAZY, mappedBy="product")
    public Set<UserVisitProducts> getUserVisitProductses() {
        return this.userVisitProductses;
    }

    public void setUserVisitProductses(Set<UserVisitProducts> userVisitProductses) {
        this.userVisitProductses = userVisitProductses;
    }

    @OneToMany(fetch=FetchType.LAZY, mappedBy="product")
    public Set<OrderProducts> getOrderProductses() {
        return this.orderProductses;
    }

    public void setOrderProductses(Set<OrderProducts> orderProductses) {
        this.orderProductses = orderProductses;
    }




}


